{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/forms/ht-form/ht-form.component.css","webpack:///./src/app/forms/ht-form/ht-form.component.html","webpack:///./src/app/forms/ht-form/ht-form.component.ts","webpack:///./src/app/forms/query-form/query-form.component.css","webpack:///./src/app/forms/query-form/query-form.component.html","webpack:///./src/app/forms/query-form/query-form.component.ts","webpack:///./src/app/ht-admin/ht-admin.component.css","webpack:///./src/app/ht-admin/ht-admin.component.html","webpack:///./src/app/ht-admin/ht-admin.component.ts","webpack:///./src/app/ht-dashboard/ht-dashboard.component.css","webpack:///./src/app/ht-dashboard/ht-dashboard.component.html","webpack:///./src/app/ht-dashboard/ht-dashboard.component.ts","webpack:///./src/app/ht-navigation/ht-navigation.component.css","webpack:///./src/app/ht-navigation/ht-navigation.component.html","webpack:///./src/app/ht-navigation/ht-navigation.component.ts","webpack:///./src/app/prime-ng-sample/prime-ng-sample.component.css","webpack:///./src/app/prime-ng-sample/prime-ng-sample.component.html","webpack:///./src/app/prime-ng-sample/prime-ng-sample.component.ts","webpack:///./src/app/services/ht-form.service.ts","webpack:///./src/app/services/issue.service.ts","webpack:///./src/app/services/post.service.ts","webpack:///./src/app/services/query.service.ts","webpack:///./src/app/tables/console-table/console-table.component.css","webpack:///./src/app/tables/console-table/console-table.component.html","webpack:///./src/app/tables/console-table/console-table.component.ts","webpack:///./src/app/tables/table/table.component.css","webpack:///./src/app/tables/table/table.component.html","webpack:///./src/app/tables/table/table.component.ts","webpack:///./src/app/tables/test-table/test-table.component.css","webpack:///./src/app/tables/test-table/test-table.component.html","webpack:///./src/app/tables/test-table/test-table.component.ts","webpack:///./src/app/tables/user-table/user-table.component.css","webpack:///./src/app/tables/user-table/user-table.component.html","webpack:///./src/app/tables/user-table/user-table.component.ts","webpack:///./src/app/test-form/test-form.component.css","webpack:///./src/app/test-form/test-form.component.html","webpack:///./src/app/test-form/test-form.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".example-container {\\n    display: flex;\\n    flex-direction: column;\\n    position: absolute;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n  }\\n  \\n  .example-is-mobile .example-toolbar {\\n    position: fixed;\\n    /* Make sure the toolbar will stay on top of the content as it scrolls past. */\\n    z-index: 2;\\n  }\\n  \\n  h1.example-app-name {\\n    margin-left: 8px;\\n  }\\n  \\n  .example-sidenav-container {\\n    /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This\\n       causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */\\n    flex: 1;\\n    color: blue;\\n  }\\n  \\n  .example-is-mobile .example-sidenav-container {\\n    /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the\\n       `<body>` to be our scrolling element for mobile layouts. */\\n    flex: 1 0 auto;\\n  }\"","module.exports = \"<app-ht-navigation></app-ht-navigation>\\n\"","import { Component, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport {MediaMatcher} from '@angular/cdk/layout';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n}\n","import { HtDashboardComponent } from './ht-dashboard/ht-dashboard.component';\nimport { HtNavigationComponent } from './ht-navigation/ht-navigation.component';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { HtFormService } from './services/ht-form.service';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Query } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { HtFormComponent } from './forms/ht-form/ht-form.component';\nimport { ModalModule } from 'ngx-modialog';\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { BootstrapModalModule } from 'ngx-modialog/plugins/bootstrap';\nimport { NguiAutoCompleteModule } from '@ngui/auto-complete';\nimport { HtAdminComponent } from './ht-admin/ht-admin.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatTableModule, MatCheckboxModule, MatSelectModule, MatSidenavModule, MatIconModule, MatToolbarModule, MatListModule, MatGridListModule, MatInputModule, MatSortModule, MatPaginatorModule } from '@angular/material';\nimport { TestTableComponent } from './tables/test-table/test-table.component';\nimport { UserTableComponent } from './tables/user-table/user-table.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ConsoleTableComponent } from './tables/console-table/console-table.component';\nimport { QueryFormComponent } from './forms/query-form/query-form.component';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { TestFormComponent } from './test-form/test-form.component';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { TableComponent } from './tables/table/table.component';\nimport { PrimeNgSampleComponent } from './prime-ng-sample/prime-ng-sample.component';\nimport { PanelModule } from 'primeng/primeng';\nimport { ButtonModule } from 'primeng/primeng';\nimport { RadioButtonModule } from 'primeng/primeng';\nimport { TableModule } from 'primeng/table';\nimport { AccordionModule } from 'primeng/accordion';     //accordion and accordion tab\n\n\nconst appRoutes: Routes = [\n  { path: '', redirectTo: '/testForm', pathMatch: 'full' },\n  { path: 'dashboard', component: HtDashboardComponent, data: { title: 'Dash Component' } },\n  { path: 'form', component: HtFormComponent, data: { title: 'Form Component' } },\n  { path: 'admin', component: HtAdminComponent, data: { title: 'Admin Component' } },\n  { path: 'users', component: UserTableComponent, data: { title: 'User Component' } },\n  { path: 'consoles', component: ConsoleTableComponent, data: { title: 'Console Component' } },\n  { path: 'tests', component: TestTableComponent, data: { title: 'Test Component' } },\n  { path: 'testForm', component: TestFormComponent, data: { title: 'Test Form Component' } },\n  { path: 'prime', component: PrimeNgSampleComponent, data: { title: 'Prime' } }\n\n\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HtFormComponent,\n    HtAdminComponent,\n    HtNavigationComponent,\n    HtDashboardComponent,\n    TestTableComponent,\n    UserTableComponent,\n    ConsoleTableComponent,\n    QueryFormComponent,\n    TestFormComponent,\n    TableComponent,\n    PrimeNgSampleComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n    RouterModule.forRoot(\n      appRoutes,\n      { useHash: true }\n    ),\n    ModalModule.forRoot(),\n    BootstrapModalModule,\n    NguiAutoCompleteModule, BrowserAnimationsModule,\n    MatTableModule, MatSelectModule, MatCheckboxModule, MatSidenavModule, MatIconModule, MatToolbarModule, MatListModule, MatCardModule, MatButtonModule,\n    CommonModule, MatGridListModule, MatInputModule, MatSortModule, MatPaginatorModule, MatProgressSpinnerModule, MatAutocompleteModule, ReactiveFormsModule, MatStepperModule,\n    AccordionModule,\n    PanelModule,\n    ButtonModule,\n    RadioButtonModule,\n    TableModule\n  ],\n  providers: [\n    HtFormService, QueryFormComponent\n  ],\n  exports: [\n    QueryFormComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".center-div{\\n    margin: 0 auto;\\n    width: 100%;  \\n}\\n.container {\\n    padding: 20px;\\n    background: #2E4A62;\\n    min-height: 100vh;\\n    min-width: 100%;\\n}\\n.ht-form-body {\\n   max-height: 800px;\\n   overflow-y: scroll;\\n}\\n/* #errorDescriptionTxt{\\n    height:105px;\\n} */\\n.card {\\n    position: absolute;\\n    margin: auto;\\n    height: 90%;\\n    width: 90%;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    padding: 18px;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"card col-md-10\\\">\\n    <div class=\\\"card-header text-center\\\">\\n      <h2> Human Tester Input Form</h2>\\n    </div>\\n    <div class=\\\"card-body ht-form-body\\\">\\n      <form #htInputForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(htInputForm)\\\" class=\\\"center-div\\\">\\n        <label class=\\\"col-form-label\\\">\\n          <h3>Test Info</h3>\\n        </label>\\n        <hr/>\\n        <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-md-4\\\">\\n                <label for=\\\"testerName\\\" class=\\\"col-form-label\\\">Tester Name</label>\\n                <input  ngui-auto-complete  [source]=\\\"testerNames\\\" type=\\\"text\\\" #testerName=\\\"ngModel\\\" required ngModel name=\\\"testerName\\\" id=\\\"testerName\\\" class=\\\"form-control\\\">\\n                <div class=\\\"alert alert-danger\\\" *ngIf=\\\"testerName.touched && !testerName.valid\\\">\\n                    <div *ngIf=\\\"testerName.errors.required\\\">Tester Name is required!</div>\\n                  </div>\\n              </div>\\n              <div class=\\\"form-group col-md-4\\\">\\n                  <label for=\\\"consoleName\\\" class=\\\"col-form-label\\\">Console Name</label>\\n                  <input ngui-auto-complete  [source]=\\\"consoleNames\\\" type=\\\"text\\\" #consoleName=\\\"ngModel\\\"  placeholder=\\\"Example: X22i Incline Trainer\\\" required ngModel name=\\\"consoleName\\\" id=\\\"consoleName\\\" class=\\\"form-control\\\">\\n                  <div class=\\\"alert alert-danger\\\" *ngIf=\\\"consoleName.touched && !consoleName.valid\\\">\\n                      <div *ngIf=\\\"consoleName.errors.required\\\">Console Name is required!</div>\\n                    </div>\\n                </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-md-4\\\">\\n            <label for=\\\"equipmentType\\\" class=\\\"col-form-label\\\">Equipment Type</label>\\n            <select required ngModel name=\\\"equipmentType\\\" id=\\\"equipmentType\\\" class=\\\"form-control\\\">\\n              <optgroup>\\n                <option *ngFor=\\\"let equipmentType of equipmentTypeList\\\" [value]=\\\"equipmentType\\\">{{equipmentType}}</option>\\n              </optgroup>\\n            </select>\\n          </div>\\n          <div class=\\\"form-group col-md-4\\\">\\n            <label for=\\\"swNumber\\\" class=\\\"col-form-label\\\">Software #</label>\\n            <input ngui-auto-complete  [source]=\\\"softwareNumbers\\\" type=\\\"text\\\" #softwareNumber=\\\"ngModel\\\" required ngModel name=\\\"swNumber\\\" id=\\\"swNumber\\\" class=\\\"form-control\\\">\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"softwareNumber.touched && !softwareNumber.valid\\\">\\n                <div *ngIf=\\\"softwareNumber.errors.required\\\">Software number is required!</div>\\n              </div>\\n          </div>\\n          <div class=\\\"form-group col-md-4\\\">\\n              <label for=\\\"machinePriority\\\" class=\\\"col-form-label\\\">Machine Priority</label>\\n              <input type=\\\"number\\\" #machinePriority=\\\"ngModel\\\" min=1 required ngModel name=\\\"machinePriority\\\" id=\\\"machinePriority\\\" class=\\\"form-control\\\">\\n              <div class=\\\"alert alert-danger\\\" *ngIf=\\\"machinePriority.touched && !machinePriority.valid\\\">\\n                  <div *ngIf=\\\"machinePriority.errors.required\\\">Priority is required!</div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-md-4\\\">\\n            <label for=\\\"testDate\\\" class=\\\"col-form-label\\\">Date</label>\\n            <input type=\\\"date\\\" ngModel name=\\\"testDate\\\" id=\\\"testDate\\\" class=\\\"form-control\\\" required>\\n          </div>\\n          <div class=\\\"form-group col-md-4\\\">\\n            <label for=\\\"interfaceName\\\" class=\\\"col-form-label\\\">Interface</label>\\n            <select required ngModel name=\\\"interfaceName\\\" id=\\\"interfaceName\\\" class=\\\"form-control\\\" #interface (change)=\\\"interfaceSelectedHandler(interface.value)\\\">\\n              <optgroup>\\n                <option *ngFor=\\\"let interfaceType of interfaceTypeList\\\" [value]=\\\"interfaceType\\\">{{interfaceType}}</option>\\n              </optgroup>\\n            </select>\\n          </div>\\n          <!-- <div *ngIf=\\\"interfaceIsBLE == true; then mobileDeviceControl ; else  screenSizeControl\\\">THIS DIV IS IGNORED</div> -->\\n          <!-- <ng-template #mobileDeviceControl> -->\\n            <div *ngIf=\\\"interfaceIsBLE == true\\\" class=\\\"form-group col-md-4\\\">\\n              <label for=\\\"deviceName\\\" class=\\\"col-form-label\\\">{{deviceType}} Name</label>\\n              <input ngui-auto-complete  [source]=\\\"deviceNames\\\" type=\\\"text\\\" ngModel name=\\\"deviceName\\\" id=\\\"deviceName\\\" class=\\\"form-control\\\" required>\\n            </div>\\n          <!-- </ng-template> -->\\n          <!-- <ng-template #screenSizeControl> -->\\n            <div *ngIf=\\\"interfaceIsBLE == false\\\" class=\\\"form-group col-md-4\\\">\\n              <label for=\\\"screenSize\\\" class=\\\"col-form-label\\\">Screen Size (inches)</label>\\n              <select required ngModel name=\\\"screenSize\\\" id=\\\"screenSize\\\" class=\\\"form-control\\\">\\n                <optgroup>\\n                  <option *ngFor=\\\"let screenSize of screenSizeList\\\" [value]=\\\"screenSize\\\">{{screenSize}}</option>\\n                </optgroup>\\n              </select>\\n            </div>\\n          <!-- </ng-template> -->\\n        </div>\\n\\n        <label class=\\\"col-form-label\\\">\\n          <h3>Versions</h3>\\n        </label>\\n        <hr/>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-md-4\\\">\\n            <label for=\\\"appVersion\\\" class=\\\"col-form-label\\\">App</label>\\n            <input ngui-auto-complete  [source]=\\\"appVersions\\\"  type=\\\"text\\\" #appVersion=\\\"ngModel\\\" placeholder=\\\"Example: 2.2.8.364\\\" pattern=\\\"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\\\" required ngModel name=\\\"appVersion\\\" id=\\\"appVersion\\\" class=\\\"form-control\\\">\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"appVersion.touched && !appVersion.valid\\\">\\n                <div *ngIf=\\\"appVersion.errors.required\\\">App version is required!</div>\\n                <div *ngIf=\\\"appVersion.errors.pattern\\\">Invalid format for version number</div>\\n              </div>\\n          </div>\\n          <div class=\\\"form-group col-md-4\\\">\\n            <label for=\\\"brainboardVersion\\\" class=\\\"col-form-label\\\">Brainboard</label>\\n            <input ngui-auto-complete  [source]=\\\"brainboardVersions\\\" type=\\\"text\\\" #bbVersion=\\\"ngModel\\\" placeholder=\\\"Example: 81.224\\\" pattern=\\\"(\\\\d+\\\\.)(\\\\d+)\\\" required ngModel name=\\\"brainboardVersion\\\" id=\\\"brainboardVersion\\\" class=\\\"form-control\\\">\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"bbVersion.touched && !bbVersion.valid\\\">\\n                <div *ngIf=\\\"bbVersion.errors.required\\\">Brainboard version is required!</div>\\n                <div *ngIf=\\\"bbVersion.errors.pattern\\\">Invalid format for version number</div>\\n              </div>\\n          </div>\\n        </div>\\n        <!-- <div *ngIf=\\\"interfaceIsBLE == false; then  embeddedVersions;\\\">THIS DIV IS IGNORED</div>\\n        <ng-template #embeddedVersions> -->\\n          <div *ngIf=\\\"interfaceIsBLE == false\\\" class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-md-4\\\">\\n              <label for=\\\"adminVersion\\\" lass=\\\"col-form-label\\\">Admin</label>\\n              <input ngui-auto-complete  [source]=\\\"adminVersions\\\" type=\\\"text\\\" #adminVersion=\\\"ngModel\\\" placeholder=\\\"Example: 1.1.1.95\\\" pattern=\\\"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\\\" required ngModel name=\\\"adminVersion\\\" id=\\\"adminVersion\\\" class=\\\"form-control\\\">\\n              <div class=\\\"alert alert-danger\\\" *ngIf=\\\"adminVersion.touched && !adminVersion.valid\\\">\\n                  <div *ngIf=\\\"adminVersion.errors.required\\\">Admin version is required!</div>\\n                  <div *ngIf=\\\"adminVersion.errors.pattern\\\">Invalid format for version number</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-md-4\\\">\\n              <label for=\\\"launcherVersion\\\"  class=\\\"col-form-label\\\">Launcher</label>\\n              <input ngui-auto-complete  [source]=\\\"launcherVersions\\\" type=\\\"text\\\" #launcherVersion=\\\"ngModel\\\" placeholder=\\\"Example: 1.0.5.20\\\" pattern=\\\"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\\\" required ngModel name=\\\"launcherVersion\\\" id=\\\"launcherVersion\\\" class=\\\"form-control\\\">\\n              <div class=\\\"alert alert-danger\\\" *ngIf=\\\"launcherVersion.touched && !launcherVersion.valid\\\">\\n                  <div *ngIf=\\\"launcherVersion.errors.required\\\">Launcher version is required!</div>\\n                  <div *ngIf=\\\"launcherVersion.errors.pattern\\\">Invalid format for version number</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group col-md-4\\\">\\n                <label for=\\\"osVersion\\\" class=\\\"col-form-label\\\">Malata OS</label>\\n                <input ngui-auto-complete  [source]=\\\"osVersions\\\" type=\\\"text\\\" #malataVersion=\\\"ngModel\\\" placeholder=\\\"Example: 20180331\\\" required ngModel name=\\\"osVersion\\\" id=\\\"osVersion\\\" class=\\\"form-control\\\">\\n                <div class=\\\"alert alert-danger\\\" *ngIf=\\\"malataVersion.touched && !malataVersion.valid\\\">\\n                    <div *ngIf=\\\"malataVersion.errors.required\\\">Malata version is required!</div>\\n                  </div>\\n              </div>\\n          </div>\\n        <!-- </ng-template> -->\\n\\n        <div *ngIf=\\\"selectedTestType === 'Test Rail'; then testRailSection ; else  workoutSection\\\">THIS DIV IS IGNORED</div>\\n        <ng-template #testRailSection>\\n          <div class=\\\"form-row\\\">\\n            <div id=\\\"test-rail-section\\\" class=\\\"form-group col-md-8\\\">\\n              <label for=\\\"testRailLink\\\" class=\\\"col-form-label\\\">Test Rail Link</label>\\n              <input required ngModel name=\\\"testRailLink\\\" #testRailLink=\\\"ngModel\\\" type=\\\"text\\\" pattern=\\\"https:\\\\/\\\\/ifit.testrail.net\\\\/index\\\\.php\\\\?\\\\/runs\\\\/view\\\\/[\\\\d]+&group_by=.*&group_order=.*\\\"\\n                class=\\\"form-control\\\" id=\\\"testRailLink\\\" placeholder=\\\"Enter link of your completed test rail run\\\">\\n              <div class=\\\"alert alert-danger\\\" *ngIf=\\\"testRailLink.touched && !testRailLink.valid\\\">\\n                <div *ngIf=\\\"testRailLink.errors.required\\\">Testrail link is required!</div>\\n                <div *ngIf=\\\"testRailLink.errors.pattern\\\">Link entered is not a valid test run URL! </div>\\n              </div>\\n            </div>\\n          </div>\\n        </ng-template>\\n\\n        <ng-template #workoutSection>\\n          <div id=\\\"workout-section\\\" class=\\\"center-div\\\">\\n            <label class=\\\"col-form-label\\\">\\n              <h3>Workout Info</h3>\\n            </label>\\n            <hr/>\\n            <div class=\\\"form-row\\\">\\n              <div class=\\\"form-group col-md-4\\\">\\n                <label for=\\\"workoutName\\\" class=\\\"col-form-label\\\">Workout Name</label>\\n                <input ngui-auto-complete  [source]=\\\"workoutNames\\\"  required ype=\\\"text\\\" #workoutName=\\\"ngModel\\\" ngModel name=\\\"workoutName\\\" id=\\\"workoutName\\\" class=\\\"form-control\\\">\\n                <div class=\\\"alert alert-danger\\\" *ngIf=\\\"workoutName.touched && !workoutName.valid\\\">\\n                    <div *ngIf=\\\"workoutName.errors.required\\\">Workout Name is required!</div>\\n                  </div>\\n              </div>\\n              <div class=\\\"form-group col-md-4\\\">\\n                <label for=\\\"workouType\\\" class=\\\"col-form-label\\\">Workout Type</label>\\n                <select ngModel name=\\\"workoutType\\\" id=\\\"workouType\\\" class=\\\"form-control\\\">\\n                  <option *ngFor=\\\"let wkType of workoutTypes\\\" [value]=\\\"wkType\\\">{{wkType}}</option>\\n                </select>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"form-row\\\">\\n                <div class=\\\"form-group col-md-4\\\">\\n                    <label for=\\\"workoutMinutes\\\" class=\\\"col-form-label\\\">Workout Minutes</label>\\n                    <input #workoutMinutes required ngModel name=\\\"workoutMinutes\\\" #workoutTime=\\\"ngModel\\\" type=\\\"number\\\" min=\\\"0\\\" class=\\\"form-control\\\" id=\\\"workoutMinutes\\\">\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"workoutMinutes.touched && !workoutMinutes.valid\\\">\\n                        <div *ngIf=\\\"workoutMinutes.errors.required\\\">Workout minutes is required!</div>\\n                      </div>\\n                  </div>\\n              <div class=\\\"form-group col-md-4\\\">\\n                <label for=\\\"anyErrors\\\" class=\\\"col-form-label\\\">Any Issues?</label>\\n                <select ngModel name=\\\"workoutHasErrors\\\" #workoutErrorSelect (change)=\\\"workoutErrorSelectedHandler(workoutErrorSelect.value)\\\"\\n                  id=\\\"anyErrors\\\" class=\\\"form-control\\\">\\n                  <option *ngFor=\\\"let option of yesNo\\\">{{option}}</option>\\n                </select>\\n              </div>\\n            </div>\\n\\n            <div *ngIf=\\\"workoutHadErrors; then workoutErrorSection\\\">THIS DIV IS IGNORED</div>\\n            <ng-template #workoutErrorSection>\\n              <div id=\\\"workout-error-section\\\">\\n                <label class=\\\"col-form-label\\\">\\n                  <h3>Workout Errors</h3>\\n                </label>\\n                <hr/>\\n\\n                <div class=\\\"form-row\\\">\\n                    <div class=\\\"form-group col-md-4\\\">\\n                        <label for=\\\"jiraTicketLink\\\" class=\\\"col-form-label\\\">Jira Ticket Link</label>\\n                        <input ngui-auto-complete [source]=\\\"jiraTicketLinks\\\" type=\\\"text\\\" #jiraLink=\\\"ngModel\\\"  pattern=\\\"(https:\\\\/\\\\/ifitdev\\\\.atlassian\\\\.net\\\\/browse\\\\/)((?!([A-Z0-9a-z]{1,10})-?$)[A-Z]{1}[A-Z0-9]+-\\\\d+)\\\" required ngModel name=\\\"jiraTicketLink\\\" id=\\\"jiraTicketLink\\\" class=\\\"form-control\\\">\\n                        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"jiraLink.touched && !jiraLink.valid\\\">\\n                            <div *ngIf=\\\"jiraLink.errors.required\\\">Ticket Link is required!</div>\\n                            <div *ngIf=\\\"jiraLink.errors.pattern\\\">Link entered is not a valid jira issue URL! </div>\\n                          </div>\\n                      </div>\\n                      <div class=\\\"form-group col-md-4\\\">\\n                          <label for=\\\"ticketPriority\\\" class=\\\"col-form-label\\\">Ticket Priority</label>\\n                          <select ngModel name=\\\"ticketPriority\\\" id=\\\"anyErrors\\\" class=\\\"form-control\\\">\\n                          <option *ngFor=\\\"let priority of ticketPriorityList\\\" [value]=\\\"priority\\\">{{priority}}</option>\\n                        </select>\\n                        </div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-row\\\">\\n                  <div class=\\\"form-group col-md-8\\\">\\n                    <label for=\\\"errorDescription\\\" class=\\\"col-form-label\\\">Error Description</label>\\n                    <input type=\\\"text\\\" ngui-auto-complete [source]=\\\"workoutErrors\\\" required ngModel name=\\\"errorDescription\\\" #errorDescription=\\\"ngModel\\\" class=\\\"form-control\\\" id=\\\"errorDescriptionTxt\\\"\\n                      placeholder=\\\"Describe the issue\\\">\\n                    <div class=\\\"alert alert-danger\\\" *ngIf=\\\"errorDescription.touched && !errorDescription.valid\\\">\\n                      <div *ngIf=\\\"errorDescription.errors.required\\\">Enter error description!</div>\\n                    </div>\\n                  </div>\\n              </div>\\n            </ng-template>\\n          </div>\\n        </ng-template>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"col-sm-12 text-center\\\">\\n            <button [disabled]=\\\"!htInputForm.form.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary col-md-3\\\">Submit</button>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</div>\"","import { HtFormService } from './../../services/ht-form.service';\nimport { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Overlay } from 'ngx-modialog';\nimport { Modal } from 'ngx-modialog/plugins/bootstrap';\n\n@Component({\n  selector: 'ht-form',\n  templateUrl: './ht-form.component.html',\n  styleUrls: ['./ht-form.component.css']\n})\nexport class HtFormComponent implements OnInit {\n\n  selectedTestType: string = \"Workout\";\n  workoutHadErrors: boolean = true;\n  interfaceTypeList = [\"Embedded\", \"BLE Android Tablet\", \"BLE iOS Tablet\", \"BLE Android Phone\", \"BLE iOS Phone\"];\n  equipmentTypeList = [\"Treadmill\", \"Bike\", \"Elliptical\", \"Freestrider\", \"Rower\", \"Fusion\"];\n  screenSizeList = [7, 10, 22];\n  ticketPriorityList = [\"Low\", \"Medium\", \"High\", \"Highest\"];\n  modelTestedList = {};\n  consoleTypes: string[] = [];\n  consoles: any = [];\n  outOfRangeDict = {}\n  userList: any = [];\n  testTypeOptions = [];\n  workoutTypes = [];\n  interfaceIsBLE: boolean = false;\n  deviceType: string = \"\";\n\n  yesNo = ['Yes', 'No'];\n\n  errorTypeList = [];\n\n  //For Text Autocomplete\n  appVersions: string[] = [];\n  brainboardVersions: string[] = [];\n  adminVersions: string[] = [];\n  launcherVersions: string[] = [];\n  osVersions: string[] = [];\n  testerNames: string[] = [];\n  consoleNames: string[] = [];\n  softwareNumbers: string[] = [];\n  workoutNames: string[] = [];\n  deviceNames: string[] = [];\n  workoutErrors: string [] = [];\n  jiraTicketLinks: string [] = [];\n\n  constructor(private service: HtFormService, public modal: Modal) { }\n\n  @ViewChild('someModal') someModal: ElementRef;\n\n  ngOnInit() {\n\n    //this.getConsoleList();\n    //this.getUsers();\n    this.getListOfTests();\n\n    this.testTypeOptions = this.service.getTestTypes();\n    this.errorTypeList = this.service.getWorkoutErrorCategories();\n    this.workoutTypes = this.service.getWorkoutTypes();\n\n  }\n\n  getListOfTests() {\n    this.service.getListOfTests().subscribe(res => {\n      var data = res['data'];\n\n      var errors = data.filter(item => {\n        if(typeof(item.workoutInfo.error) != 'undefined'){\n          return item;\n        }\n      });\n\n      var ble = data.filter(item => {\n        if(typeof(item.deviceName) != 'undefined'){\n          return item;\n        }\n      });\n\n      this.deviceNames = ble.map(item => item.deviceName).filter(this.onlyUnique);\n      this.workoutErrors = errors.map(item => item.workoutInfo.error.description).filter(this.onlyUnique);\n      this.jiraTicketLinks = errors.map(item => item.workoutInfo.error.jiraTicket.link).filter(this.onlyUnique);\n\n      console.log(\"Workout Errors\", this.workoutErrors);\n\n      this.testerNames = data.map(item => item.testerName).filter(this.onlyUnique);\n      this.consoleNames = data.map(item => item.consoleName).filter(this.onlyUnique);\n      this.workoutNames = data.map(item => item.workoutInfo.name).filter(this.onlyUnique);\n      this.softwareNumbers = data.map(item => item.swNumber).filter(this.onlyUnique);\n      this.brainboardVersions = data.map(item => item.versions.brainboard).filter(this.onlyUnique);\n      this.appVersions = data.map(item => item.versions.app).filter(this.onlyUnique);\n\n      if (this.interfaceIsBLE) {\n        this.deviceNames = data.map(item => item.deviceName);\n      }\n      else {\n        this.adminVersions = data.map(item => item.versions.admin).filter(this.onlyUnique);\n        this.launcherVersions = data.map(item => item.versions.launcher).filter(this.onlyUnique);\n        this.osVersions = data.map(item => item.versions.malataOS).filter(this.onlyUnique);\n      }\n    });\n  }\n\n  onlyUnique = function (value, index, self) { \n    return self.indexOf(value) === index;\n  }\n\n  getUsers() {\n    this.service.getListOfUsers().subscribe(res => {\n      var data = res['data'];\n      this.userList = data;\n      this.userList.forEach(element => {\n        element.name = element.firstName + \" \" + element.lastName;\n      });\n\n      this.userList = this.userList.filter(user => {\n        return user.role == \"Tester\"\n      })\n    });\n  }\n\n  getConsoleList() {\n    this.service.getListOfConsoles().subscribe(res => {\n      var data = res['data'];\n      this.consoles = data;\n      this.consoles.forEach(item => {\n        if (typeof (this.modelTestedList[item.type]) != 'undefined') {\n          this.modelTestedList[item.type].push({ \"model\": item.model, \"modelId\": item._id })\n        }\n        else {\n          this.modelTestedList[item.type] = [{ \"model\": item.model, \"modelId\": item._id }];\n        }\n      })\n\n      this.consoleTypes = Object.keys(this.modelTestedList);\n      console.log(\"Consoles: \");\n      console.log(this.consoles);\n      console.log(this.modelTestedList);\n      // this.modelTestedSelectedHandler(this.consoles[0].model);\n    });\n  }\n\n  //event handler for the Test type Dropdown change event\n  testTypeSelectedHandler(value: string) {\n    this.selectedTestType = value;;\n    console.log(\"Test Type Value: \" + value);\n\n  }\n\n  workoutErrorSelectedHandler(value: string) {\n    this.workoutHadErrors = value === 'Yes';\n  }\n\n  interfaceSelectedHandler(value: string) {\n    this.interfaceIsBLE = value.includes(\"BLE\");\n    if (value.includes(\"Phone\"))\n      this.deviceType = \"Phone\"\n    else\n      this.deviceType = \"Tablet\"\n  }\n\n  checkIfValid(formControl) {\n    let invalid = false;\n    console.log(\"Form Name: \" + formControl.name);\n    switch (formControl.name) {\n      case 'testerWeight':\n        invalid = (formControl.valid && (formControl.value < 80 || formControl.value > 400))\n        break;\n      case 'workoutDistance':\n        invalid = (formControl.valid && (formControl.value < 0.1 || formControl.value > 10))\n        break;\n    }\n    this.outOfRangeDict[formControl.name] = invalid;\n    if (invalid) {\n      formControl.control.setErrors({\n        outofrange: true\n      })\n    }\n    console.log(\"From checkIfValid() : \");\n    console.log(formControl);\n    return invalid;\n  }\n\n  modelTestedSelectedHandler(modelId) {\n    console.log(\"modelName: \" + modelId)\n    //this.appVersionList = this.modelTestedList.find((item)=> item.model == modelName).appVersions;\n    var versions = this.consoles.find((item) => item._id == modelId).versions;\n    // this.brainboardVersionList = versions.map(ver => {\n    //   return ver.number\n    // })\n    // console.log(\"BB Versions:\");\n    // console.log(this.brainboardVersionList);\n\n  }\n  getJiraTicketFromLink(formValues: any) {\n    var ticketLink: string = formValues[\"jiraTicketLink\"];\n    var pattern: string = \"browse/\";\n    var key: string = \"N/A\";\n\n    if (ticketLink.indexOf(pattern) >= 0) //if a pattern is not present in the source string indexOf method returns -1\n    {\n      //to truncate everything before the pattern. An example ticket link is: https://ifitdev.atlassian.net/browse/WORK-657\n      //so this would return just the key which is: WORK-657\n      key = ticketLink.substr(ticketLink.indexOf(pattern) + pattern.length, ticketLink.length);\n    }\n    var ticket = {\n      'link': ticketLink,\n      'key': key,\n      'priority': formValues[\"ticketPriority\"]\n    };\n\n    return ticket;\n  }\n\n  onSubmit(form: NgForm) {\n    console.log(\"Form Value\");\n    console.log(form.value);\n    var item = form.value;\n    var jiraTicket = {};\n    if (this.workoutHadErrors) {\n      jiraTicket = this.getJiraTicketFromLink(item);\n    }\n    var testObj = {\n      'testerName': item['testerName'],\n      'consoleName': item['consoleName'],\n      'equipmentType': item['equipmentType'],\n      'swNumber': item['swNumber'],\n      'machinePriority': item['machinePriority'],\n      'testDate': item['testDate'],\n      'interfaceName': item['interfaceName'],\n      'screenSize': this.interfaceIsBLE ? '0' : item['screenSize'],\n      'deviceName': this.interfaceIsBLE ? item['deviceName'] : \"N/A\",\n      'versions': {\n        'app': item['appVersion'],\n        'brainboard': item['brainboardVersion'],\n        'admin': this.interfaceIsBLE ? \"N/A\" : item['adminVersion'],\n        'launcher': this.interfaceIsBLE ? \"N/A\" : item['launcherVersion'],\n        'malataOS': this.interfaceIsBLE ? \"N/A\" : item['osVersion'],\n      },\n      'workoutInfo': {\n        'name': item['workoutName'],\n        'type': item['workoutType'],\n        'totalMinutes': item['workoutMinutes'],\n        'error': item['workoutHasErrors'] == 'No' ? {} : {\n          'type': item['workoutErrorType'],\n          'description': item['errorDescription'],\n          'jiraTicket': jiraTicket\n\n        }\n      }\n    }\n    console.log(\"testObj\");\n    console.log(testObj);\n\n    const dialogRef = this.modal.alert()\n      .size('lg')\n      .isBlocking(true)\n      .showClose(false)\n      .keyboard(27)\n      .title('Yayy!')\n      .body('Your test feedback has been submitted successfully!')\n\n    this.service.addTest([testObj]).subscribe(res => {\n      console.log(\"Test has been submitted \", res);\n      dialogRef.open();\n      form.reset();\n      this.getListOfTests();\n    },\n      err => {\n        console.log(\"Error submitting test\\n\");\n        console.log(err);\n        dialogRef.title(\"Ooops!\")\n          .body(\"Something went wrong while submitting your test feedback. See details below: \\n\\n\" + err._body).open();\n      })\n  }\n}\n","module.exports = \"\"","module.exports = \"<!-- <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\"> -->\\n<form #f=\\\"ngForm\\\">\\n\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"Fields\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"fieldControl\\\"\\n      [matAutocomplete]=\\\"field\\\">\\n    <mat-autocomplete (optionSelected)=\\\"updateDistinctValues()\\\" #field=\\\"matAutocomplete\\\">\\n      <mat-option *ngFor=\\\"let option of filteredFields | async\\\" [value]=\\\"option\\\">\\n        {{option}}\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input type=\\\"text\\\" placeholder=\\\"Values\\\" aria-label=\\\"Number\\\" matInput [formControl]=\\\"distinctControl\\\"\\n      [matAutocomplete]=\\\"value\\\">\\n    <mat-autocomplete #value=\\\"matAutocomplete\\\">\\n      <mat-option *ngFor=\\\"let value of filteredDistincts | async\\\" [value]=\\\"value\\\">\\n        {{value}}\\n      </mat-option>\\n    </mat-autocomplete>\\n  </mat-form-field>\\n\\n  <button (click)=\\\"onSubmit()\\\" class=\\\"ui button\\\">Submit</button>\\n  <button (click)=\\\"onReset()\\\" class=\\\"ui button\\\">Reset</button>\\n</form>\"","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { merge, Observable, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { QueryService } from '../../services/query.service'\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'app-query-form',\n  templateUrl: './query-form.component.html',\n  styleUrls: ['./query-form.component.css']\n})\nexport class QueryFormComponent implements OnInit {\n  models: string[]= ['Tests', 'Consoles', 'Users'];\n  fieldControl = new FormControl();\n  distinctControl = new FormControl();\n  fields: string[] = [];\n  filteredFields: Observable<string[]>;\n  values: string[] = [''];\n  filteredDistincts: Observable<string[]>;\n  queryParams = {};\n\n  constructor(private http: HttpClient, private queryService: QueryService) { }\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @Output() resetButtonEmitter = new EventEmitter<null>();\n  @Output() submitButtonQueryEmitter = new EventEmitter<String>();\n  @Input() modelType: string;\n\n  ngOnInit() {\n    this.setFields();\n    this.populateQuery();\n  }\n\n  updateDistinctValues() {\n    if (this.modelType == \"consoles\") {\n      this.queryService.getDistinctConsoles(this.fieldControl.value, '').subscribe(res => {\n        this.values = res['data'];\n        this.filteredDistincts = this.distinctControl.valueChanges\n          .pipe(\n            startWith(''),\n            map(value => this.distinctFilter(value))\n          );\n      });\n    }\n    if (this.modelType == \"tests\") {\n      this.queryService.getDistinctTests(this.fieldControl.value, '').subscribe(res => {\n        this.values = res['data'];\n        this.filteredDistincts = this.distinctControl.valueChanges\n          .pipe(\n            startWith(''),\n            map(value => this.distinctFilter(value))\n          );\n      });\n    }\n    if (this.modelType == \"users\") {\n      this.queryService.getDistinctUsers(this.fieldControl.value, '').subscribe(res => {\n        this.values = res['data'];\n        this.filteredDistincts = this.distinctControl.valueChanges\n          .pipe(\n            startWith(''),\n            map(value => this.distinctFilter(value))\n          );\n      });\n    }\n  }\n\n  populateQuery() {\n    this.filteredFields = this.fieldControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => this.fieldFilter(value))\n      );\n\n    this.filteredDistincts = this.distinctControl.valueChanges\n      .pipe(\n        startWith(''),\n        map(value => this.distinctFilter(value))\n      );\n  }\n\n  private fieldFilter(input: string): string[] {\n    if (input != null) {\n      const fieldValue = input.toLowerCase();\n      return this.fields.filter(option => option.toLowerCase().includes(fieldValue));\n    }\n  }\n\n  private distinctFilter(value: string): string[] {\n    if (value != null) {\n      const distinctValue = value.toLowerCase();\n      return this.values.filter(option => option.toLowerCase().includes(distinctValue));\n    }\n  }\nsetFields() {\n  if (this.modelType == \"consoles\") {\n    this.fields = ['modelNumber', 'machineType','OS', 'deviceCategory', 'partNumber', 'serialNumber'];\n  }\n  if (this.modelType == \"users\") {\n    this.fields = ['email', 'membershipType','gender'];\n  }\n  if (this.modelType == \"tests\") {\n    this.fields = [\"email\", \"workoutId\", \"workoutTime\", \"submitDate\", \"modelNumber\", \"machineType\", \"OS\", \"deviceCategory\"];\n  }\n}\n\n  onSubmit() {\n    this.queryParams = {};\n    this.queryParams[this.fieldControl.value] = this.distinctControl.value;\n    this.submitButtonQueryEmitter.emit( JSON.stringify(this.queryParams));\n  }\n\n  onReset() {\n    this.fieldControl.reset();\n    this.distinctControl.reset();\n    this.populateQuery();\n    this.resetButtonEmitter.emit();\n  }\n}","module.exports = \"\"","module.exports = \"<app-query-form></app-query-form>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ht-admin',\n  templateUrl: './ht-admin.component.html',\n  styleUrls: ['./ht-admin.component.css']\n})\nexport class HtAdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"mat-grid-tile {    \\n    border: 100px;\\n}\"","module.exports = \"<p>Test</p>\\n<mat-grid-list cols=\\\"4\\\" rowHeight=\\\"100px\\\">\\n  <mat-grid-tile\\n      *ngFor=\\\"let tile of tiles\\\"\\n      [colspan]=\\\"tile.cols\\\"\\n      [rowspan]=\\\"tile.rows\\\"\\n      [style.background]=\\\"tile.color\\\">\\n    {{tile.text}}\\n  </mat-grid-tile>\\n</mat-grid-list>\\n\"","import { Component, OnInit } from '@angular/core';\n\nexport interface Tile {\n  color: string;\n  cols: number;\n  rows: number;\n  text: string;\n}\n\n@Component({\n  selector: 'app-ht-dashboard',\n  templateUrl: './ht-dashboard.component.html',\n  styleUrls: ['./ht-dashboard.component.css']\n})\nexport class HtDashboardComponent{\n\n  tiles: Tile[] = [\n    {text: 'Tests', cols: 1, rows: 2, color: 'lightblue'},\n    {text: 'Users', cols: 1, rows: 2, color: 'lightgreen'},\n    {text: 'Three', cols: 1, rows: 2, color: 'lightpink'},\n    {text: 'Four', cols: 1, rows: 2, color: '#DDBDF1'},\n  ];\n\n}\n","module.exports = \"mat-sidenav {\\n    height: 100%;\\n    color: slategrey;\\n}\"","module.exports = \"<mat-toolbar color=\\\"warn\\\">\\n  <mat-toolbar-row>\\n    <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\" color=\\\"primary\\\">\\n      <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n    </button>\\n  </mat-toolbar-row>\\n</mat-toolbar>\\n<mat-sidenav-container class=\\\"example-container\\\">\\n  <mat-sidenav #drawer mode=\\\"side\\\" opened role=\\\"navigation\\\">\\n    <mat-nav-list>\\n      <a mat-list-item routerLink='/form'>Human Testing Form</a>\\n      <a mat-list-item routerLink='/admin'>Admin</a>\\n      <a mat-list-item routerLink='/dashboard'>Dashboard</a>\\n      <a mat-list-item routerLink='/users'>Users</a>\\n      <a mat-list-item routerLink='/consoles'>Consoles</a>\\n      <a mat-list-item routerLink='/tests'>Tests</a>\\n      <a mat-list-item routerLink='/testForm'>Test Form</a>\\n      <a mat-list-item routerLink='/prime'>Prime Test</a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n    <router-outlet></router-outlet>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-ht-navigation',\n  templateUrl: './ht-navigation.component.html',\n  styleUrls: ['./ht-navigation.component.css']\n})\nexport class HtNavigationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h3 class=\\\"first\\\">Basic</h3>\\n<p-table [value]=\\\"cars\\\">\\n  <ng-template pTemplate=\\\"header\\\">\\n    <tr>\\n      <th>Jira Key</th>\\n      <th>Keywords</th>\\n      <th>Priority</th>\\n      <th>Seen By</th>\\n      <th>Event Id</th>\\n    </tr>\\n  </ng-template>\\n  <ng-template pTemplate=\\\"body\\\" let-issue>\\n    <tr>\\n      <td>{{issue.jiraKey}}</td>\\n      <td>{{issue.keywords}}</td>\\n      <td>{{issue.priority}}</td>\\n      <td>{{issue.seenBy}}</td>\\n      <td>{{issue.eventId}}</td>\\n    </tr>\\n  </ng-template>\\n</p-table>\"","import { Component, OnInit } from '@angular/core';\nimport { IssueService } from '../services/issue.service';\n\n@Component({\n  selector: 'app-prime-ng-sample',\n  templateUrl: './prime-ng-sample.component.html',\n  styleUrls: ['./prime-ng-sample.component.css']\n})\n\nexport class PrimeNgSampleComponent implements OnInit {\n\n\n\n  issues: Issue[];\n\n  cols: any[];\n\n  constructor(private issueService: IssueService) { }\n\n  ngOnInit() {\n    this.issueService.getIssues().subscribe(issues => this.issues = issues);\n\n    this.cols = [\n      { field: 'jiraKey', header: 'Jira Key' },\n      { field: 'keywords', header: 'Keywords' },\n      { field: 'priority', header: 'Priority' },\n      { field: 'seenBy', header: 'Seen By' },\n      { field: 'eventId', header: 'Event Id' }\n    ];\n  }\n}\n\nexport class Issue {\n  _id: string;\n  createdAt: string;\n  eventId: string;\n  jiraKey: string;\n  priority: string;\n  seenBy: string;\n  description: string;\n  status: string;\n  location: string;\n  isCrash: string;\n}","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport {map}  from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HtFormService {\n\n  uri = '/api';\n  constructor(private http: Http, ) { }\n\n  //Collection: Equipment\n  getListOfConsoles() {\n    return this.http.get(`${this.uri + \"/consoles\"}`)\n    .pipe(map(res => res.json()));\n  }\n\n  //Collection: Users\n  getListOfUsers() {\n    return this.http.get(`${this.uri + \"/users\"}`)\n    .pipe(map(res => res.json()));\n\n  }\n\n  getListOfTests(){\n    return this.http.get(`${this.uri + \"/tests\"}`)\n    .pipe(map(res => res.json()));\n  }\n\n  addTest(test){\n    return this.http.post(`${this.uri + \"/tests\"}`, test);\n  }\n\n  //Collection: TestInfo\n  getTestTypes() {\n    return ['Workout', 'Test Rail'];\n  }\n\n  getWorkoutErrorCategories() {\n    return ['Wifi', 'Ble connection', 'User interface']\n  }\n\n  getWorkoutTypes() {\n    return ['N/A', 'Manual', 'Map', 'Video'];\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http'; import { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IssueService {\n  uri = '/api';\n  constructor(private http: Http, ) { }\n\n  getIssues() {\n    return this.http.get(`${this.uri} + /issues/getIssues`)\n      .pipe(map(res => res.json()));\n  }\n\n  getIssueById(id: string) {\n    return this.http.get(`${this.uri} + /issues/getIssueById/${id}`)\n      .pipe(map(res => res.json()));\n  }\n\n  removeIssueById(id: string) {\n    return this.http.get(`${this.uri} + /issues/removeIssueById/${id}`)\n      .pipe(map(res => res.json()));\n  }\n\n  addIssue(issue) {\n    let body = JSON.stringify(issue);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    return this.http.post(`${this.uri + \"/issues/addIssue\"}`, body, options);\n  }\n\n  updateIssue(issue) {\n    let body = JSON.stringify(issue);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    return this.http.post(`${this.uri + \"/issues/update\"}`, body, options);\n  }\n\n  sendIssueToMixpnael(issue, event) {\n    let body = JSON.stringify(issue, event);\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n    return this.http.post(`${this.uri + \"/issues/sendIssueToMixpanel\"}`, body, options);\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  uri = '/api';\n  constructor(private http: HttpClient, ) { }\n\n  addTest(data) {\n    this.http.post(`${this.uri + \"/tests\"}`, data)\n      .subscribe(\n        res => {\n        },\n        err => {\n          console.log(\"Error occured\");\n        }\n      );\n  }\n\n  addConsole(data) {\n    this.http.post(`${this.uri + \"/consoles\"}`, data)\n      .subscribe(\n        res => {\n        },\n        err => {\n          console.log(\"Error occured\");\n        }\n      );\n  }\n\n  addUser(data) {\n    this.http.post(`${this.uri + \"/users\"}`, data)\n      .subscribe(\n        res => {\n        },\n        err => {\n          console.log(\"Error occured\");\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport {map}  from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QueryService {\n  uri = '/api';\n  constructor(private http: Http, ) { }\n\n  //Collection: Equipment\n  getListOf(model: string, query:string) {\n    console.log(\"model: \", model);\n    return this.http.get(`${this.uri + \"/\" + model + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  getListOfConsoles(query:string) {\n    return this.http.get(`${this.uri + \"/consoles\"  + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  //Collection: Users\n  getListOfUsers(query:string) {\n    return this.http.get(`${this.uri + \"/users\" + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  getListOfTests(query:string) {\n    return this.http.get(`${this.uri + \"/tests\" + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  getDistinctTests(distinct:string, query:string) {\n    return this.http.get(`${this.uri + \"/tests\" + '/?query=' + query + '&distinct=' + distinct}`)\n   .pipe(map(res => res.json()));\n    } \n\n    getDistinctConsoles(distinct:string, query:string) {\n      return this.http.get(`${this.uri + \"/consoles\" + '/?query=' + query + '&distinct=' + distinct}`)\n     .pipe(map(res => res.json()));\n      } \n\n      getDistinctUsers(distinct:string, query:string) {\n        return this.http.get(`${this.uri + \"/users\" + '/?query=' + query + '&distinct=' + distinct}`)\n       .pipe(map(res => res.json()));\n        } \n\n  addTest(test){\n    return this.http.post(`${this.uri + \"/tests\"}`, test);\n  }\n//Query Redshift DB\n  queryiFit(query:string) {\n    return this.http.get(`${this.uri + \"/iFit\" + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  getCompletedWorkout(userID:string) {\n    let query = `workoutId: userID`;\n    return this.http.get(`${this.uri + \"/redshift\" + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  getConsoleInfo(email:string) {\n    let query = `\"traits.email: ${email}\"`;\n    return this.http.get(`${this.uri + \"/iFit\" + '/?query=' + query}`)\n    .pipe(map(res => res.json()));\n  }\n\n  getTestPaths() {\n    return this.http.get(`${this.uri + \"/tests/attributes\"}`)\n    .pipe(map(res => res.json()));\n  }\n \n  getTestTypes() {\n    return ['Workout', 'Test Rail'];\n  }\n\n  getWorkoutErrorCategories() {\n    return ['Wifi', 'Ble connection', 'User interface']\n  }\n\n  getWorkoutTypes() {\n    return ['N/A', 'Manual', 'Map', 'Video'];\n  }\n\n}\n","module.exports = \"table {\\n    width: 100%;\\n  }\"","module.exports = \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n  </div>\\n\\n  <div class=\\\"example-table-container\\\">\\n\\n    <app-query-form  [modelType] = \\\"model\\\" (submitButtonQueryEmitter)= 'onQueryClick($event)'  (resetButtonEmitter)=  'onQueryReset($event)'></app-query-form>\\n\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"test-table\\\" matSort matSortActive=\\\"created\\\" matSortDisableClear\\n      matSortDirection=\\\"asc\\\">\\n\\n      <!-- Model Number Column -->\\n      <ng-container matColumnDef=\\\"modelNumber\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Model Number</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.modelNumber}}</td>\\n      </ng-container>\\n\\n      <!-- Machine Type Column -->\\n      <ng-container matColumnDef=\\\"machineType\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Machine Type</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.machineType}}</td>\\n      </ng-container>\\n\\n      <!-- OS Column -->\\n      <ng-container matColumnDef=\\\"OS\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>OS</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.OS}}</td>\\n      </ng-container>\\n\\n      <!-- Device Category Column -->\\n      <ng-container matColumnDef=\\\"deviceCategory\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Device Category</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.deviceCategory}}</td>\\n      </ng-container>\\n\\n      <!-- Workout Time Column -->\\n      <ng-container matColumnDef=\\\"partNumber\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Part Number</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.partNumber}}</td>\\n      </ng-container>\\n\\n      <!-- Submit Date Column -->\\n      <ng-container matColumnDef=\\\"serialNumber\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Serial Number</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.serialNumber}}</td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n  </div>\\n\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</div>\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { merge, Observable, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport { Test } from '../../../../models/test'\nimport { QueryService } from '../../services/query.service'\n\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'app-console-table',\n  templateUrl: './console-table.component.html',\n  styleUrls: ['./console-table.component.css']\n})\nexport class ConsoleTableComponent implements OnInit {\n  displayedColumns = ['modelNumber', 'OS', 'deviceCategory', 'partNumber', 'serialNumber', 'machineType'];\n  data: Test[] = [];\n  resultsLength = 0;\n  isLoadingResults = true;\n  model = \"consoles\";\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private queryService: QueryService) { }\n\n  ngOnInit() {\n    this.populateTable(null);\n  }\n\n  populateTable(queryParams) {\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.queryService.getListOfConsoles(queryParams);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.resultsLength = data.count;\n          return data.data;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.data = data);\n  }\n\n  onQueryClick(queryParams) {\n    this.populateTable(queryParams);\n  }\n\n  onQueryReset() {\n    this.populateTable(null);\n  }\n}","module.exports = \"\"","module.exports = \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n  </div>\\n\\n  <div class=\\\"example-table-container\\\">\\n\\n    <app-query-form (submitButtonModelEmitter) = 'populateTable($event)' (submitButtonQueryEmitter)= 'onQueryClick($event)'  (resetButtonEmitter)=  'onQueryReset($event)'></app-query-form>\\n\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"test-table\\\" matSort matSortActive=\\\"created\\\" matSortDisableClear\\n      matSortDirection=\\\"asc\\\">\\n\\n      <!-- Model Number Column -->\\n      <ng-container ng-repeat=\\\"let column in displayedColumns\\\" matColumnDef=\\\"model_number\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>{{column}}</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{column}}</td>\\n      </ng-container>\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n    </table>\\n  </div>\\n\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</div>\"","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit, ViewChild, Query, Input, HostListener } from '@angular/core';\nimport { MatPaginator, MatSort, MatButton } from '@angular/material';\nimport { merge, Observable, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport { Test } from '../../../../models/test'\nimport { QueryService } from '../../services/query.service'\nimport { QueryFormComponent} from '../../forms/query-form/query-form.component'\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class TableComponent implements OnInit {\n  private httpClient: HttpClient;\n  queryForm = new QueryFormComponent(this.httpClient, this.queryService);\n  displayedColumns = [\"email\", \"workout_id\", \"workout_time\", \"submit_date\", \"model_number\", \"machine_type\", \"os\", \"device_category\"];\n  data: Test[] = [];\n  resultsLength = 0;\n  isLoadingResults = true;\n  currentModel = \"consoles\";\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  constructor(private queryService: QueryService) { }\n\n  ngOnInit() {\n    this.populateTable(null);\n  }\n\n  populateTable(queryParams) {\n    this.getColumns();\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          //this.isLoadingResults = true;\n          if (this.currentModel = \"consoles\") {\n            return this.queryService.getListOfConsoles(queryParams);\n          }\n          if(this.currentModel = \"users\") {\n            return this.queryService.getListOfUsers(queryParams);\n          }\n          if(this.currentModel = \"tests\") {\n            return this.queryService.getListOfTests(queryParams);\n          }\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.resultsLength = data.count;\n          return data.data;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.data = data);\n  }\n\n  onQueryClick(queryParams) {\n    this.populateTable(queryParams);\n  }\n\n  onQueryReset() {\n    this.populateTable(null);\n  }\n\n  onModelSelected(model) {\n    this.currentModel = model;\n    this.populateTable(null);\n  }\n\n  getColumns() {\n    if (this.currentModel == \"consoles\") {\n      this.displayedColumns = ['model_number', 'machine_type','os', 'device_category', 'part_number', 'serial_number'];\n    }\n    if (this.currentModel == \"users\") {\n      this.displayedColumns = ['email', 'membership_type','gender'];\n    }\n    if (this.currentModel == \"tests\") {\n      this.displayedColumns = [\"email\", \"workout_id\", \"workout_time\", \"submit_date\", \"model_number\", \"machine_type\", \"os\", \"device_category\"];\n    }\n    console.log('Columns: ', this.displayedColumns);\n  }\n}\n","module.exports = \"table {\\n    width: 100%;\\n  }\"","module.exports = \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n  </div>\\n\\n  <div class=\\\"example-table-container\\\">\\n\\n    <app-query-form [modelType] = \\\"model\\\" (submitButtonModelEmitter) = 'populateTable($event)' (submitButtonQueryEmitter)= 'onQueryClick($event)'  (resetButtonEmitter)=  'onQueryReset($event)'></app-query-form>\\n\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"test-table\\\" matSort matSortActive=\\\"created\\\" matSortDisableClear\\n      matSortDirection=\\\"asc\\\">\\n\\n      <!-- Email  Column -->\\n      <ng-container matColumnDef=\\\"email\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.email}}</td>\\n      </ng-container>\\n\\n      <!-- Model Number Column -->\\n      <ng-container matColumnDef=\\\"modelNumber\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Model Number</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.modelNumber}}</td>\\n      </ng-container>\\n\\n      <!-- Machine Type Column -->\\n      <ng-container matColumnDef=\\\"machineType\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Machine Type</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.machineType}}</td>\\n      </ng-container>\\n\\n      <!-- OS Column -->\\n      <ng-container matColumnDef=\\\"OS\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>OS</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.OS}}</td>\\n      </ng-container>\\n\\n      <!-- Device Category Column -->\\n      <ng-container matColumnDef=\\\"deviceCategory\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Device Category Date</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.deviceCategory}}</td>\\n      </ng-container>\\n\\n      <!-- Workout ID Column -->\\n      <ng-container matColumnDef=\\\"workoutId\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Workout ID</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.workoutId}}</td>\\n      </ng-container>\\n\\n      <!-- Workout Time Column -->\\n      <ng-container matColumnDef=\\\"workoutTime\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Workout Time</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.workoutTime}}</td>\\n      </ng-container>\\n\\n      <!-- Submit Date Column -->\\n      <ng-container matColumnDef=\\\"submitDate\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Submit Date</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.submitDate}}</td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n    </table>\\n  </div>\\n\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</div>\"","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit, ViewChild, Query, Input, HostListener } from '@angular/core';\nimport { MatPaginator, MatSort, MatButton } from '@angular/material';\nimport { merge, Observable, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { Test } from '../../../../models/test'\nimport { QueryService } from '../../services/query.service'\nimport { QueryFormComponent} from '../../forms/query-form/query-form.component'\nimport { EventEmitter } from '@angular/core';\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'app-test-table',\n  templateUrl: './test-table.component.html',\n  styleUrls: ['./test-table.component.css']\n})\nexport class TestTableComponent implements OnInit {\n  private httpClient: HttpClient;\n  queryForm = new QueryFormComponent(this.httpClient, this.queryService);\n  displayedColumns = [\"email\", \"workoutId\", \"workoutTime\", \"submitDate\", \"modelNumber\", \"machineType\", \"OS\", \"deviceCategory\"];\n  data: Test[] = [];\n  resultsLength = 0;\n  isLoadingResults = true;\n  model = \"tests\";\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private queryService: QueryService) { }\n\n  ngOnInit() {\n    this.populateTable(null);\n  }\n\n  populateTable(queryParams) {\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n            return this.queryService.getListOfTests(queryParams);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.resultsLength = data.count;\n          return data.data;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.data = data);\n  }\n\n  onQueryClick(queryParams) {\n    this.populateTable(queryParams);\n  }\n\n  onQueryReset() {\n    this.populateTable(null);\n  }\n}","module.exports = \"table {\\n    width: 100%;\\n  }\"","module.exports = \"<div class=\\\"example-container mat-elevation-z8\\\">\\n  <div class=\\\"example-loading-shade\\\" *ngIf=\\\"isLoadingResults || isRateLimitReached\\\">\\n    <mat-spinner *ngIf=\\\"isLoadingResults\\\"></mat-spinner>\\n  </div>\\n\\n  <div class=\\\"example-table-container\\\">\\n\\n      <app-query-form  [modelType] = \\\"model\\\" (submitButtonQueryEmitter)= 'onQueryClick($event)'  (resetButtonEmitter)=  'onQueryReset($event)'></app-query-form>\\n\\n    <table mat-table [dataSource]=\\\"data\\\" class=\\\"test-table\\\" matSort matSortActive=\\\"created\\\" matSortDisableClear\\n      matSortDirection=\\\"asc\\\">\\n\\n      <!-- Model Number Column -->\\n      <ng-container matColumnDef=\\\"email\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.email}}</td>\\n      </ng-container>\\n\\n      <!-- Machine Type Column -->\\n      <ng-container matColumnDef=\\\"age\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Age</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.age}}</td>\\n      </ng-container>\\n\\n      <!-- OS Column -->\\n      <ng-container matColumnDef=\\\"birthday\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Birthday</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.birthday}}</td>\\n      </ng-container>\\n\\n      <!-- Device Category Column -->\\n      <ng-container matColumnDef=\\\"weight\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Weight</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.weight}}</td>\\n      </ng-container>\\n\\n      <!-- Workout Time Column -->\\n      <ng-container matColumnDef=\\\"membershipType\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Membership Type</th>\\n        <td mat-cell *matCellDef=\\\"let row\\\">{{row.membershipType}}</td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n    </table>\\n  </div>\\n\\n  <mat-paginator [length]=\\\"resultsLength\\\" [pageSize]=\\\"30\\\"></mat-paginator>\\n</div>\"","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { merge, Observable, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { Test } from '../../../../models/test'\nimport { QueryService } from '../../services/query.service'\n\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'app-user-table',\n  templateUrl: './user-table.component.html',\n  styleUrls: ['./user-table.component.css']\n})\nexport class UserTableComponent implements OnInit {\n  displayedColumns = ['email', 'birthday', 'weight', 'membershipType'];\n  data: Test[] = [];\n  resultsLength = 0;\n  isLoadingResults = true;\n  model = \"users\";\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private queryService: QueryService) { }\n\n  ngOnInit() {\n    this.populateTable(null);\n  }\n\n  populateTable(queryParams) {\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.queryService.getListOfUsers(queryParams);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.resultsLength = data.count;\n          return data.data;\n        }),\n        catchError(() => {\n          this.isLoadingResults = false;\n          return observableOf([]);\n        })\n      ).subscribe(data => this.data = data);\n  }\n\n  onQueryClick(queryParams) {\n    this.populateTable(queryParams);\n  }\n\n  onQueryReset() {\n    this.populateTable(null);\n  }\n}","module.exports = \".example-container {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n  .example-container > * {\\n    width: 100%;\\n  }\\n  button {\\n   margin: 6px;\\n  }\\n  mat-card {\\n    margin-right: 6px;\\n    background-color: whitesmoke;\\n  } \\n  \"","module.exports = \"<mat-horizontal-stepper [linear]=\\\"true\\\" #stepper>\\n  <mat-step [stepControl]=\\\"emailFormGroup\\\">\\n    <mat-card>\\n      <form [formGroup]=\\\"emailFormGroup\\\">\\n        <ng-template matStepLabel>Email</ng-template>\\n        <mat-card-title>Please Enter Your Email</mat-card-title>\\n        <mat-card-content>\\n          <mat-form-field>\\n            <input matInput placeholder=\\\"example@ifit.com\\\" formControlName=\\\"emailCtrl\\\">\\n            <mat-error *ngIf=\\\"emailFormGroup.invalid\\\">{{getEmailError()}}</mat-error>\\n          </mat-form-field>\\n          <div>\\n            <button mat-raised-button (click)=\\\"getInfo()\\\" matStepperNext>Next</button>\\n          </div>\\n        </mat-card-content>\\n      </form>\\n    </mat-card>\\n  </mat-step>\\n\\n  <mat-step [stepControl]=\\\"verifyFormGroup\\\" [optional]=\\\"true\\\">\\n    <mat-card>\\n      <form [formGroup]=\\\"verifyFormGroup\\\">\\n        <ng-template matStepLabel>Verify</ng-template>\\n        <mat-card-title>Is This Information Correct?</mat-card-title>\\n          <mat-card-content>\\n            <code>\\n              <pre>{{workoutData |json}}</pre>\\n          </code>\\n          </mat-card-content>\\n        <div>\\n          <button mat-raised-button matStepperPrevious>No</button>\\n          <button mat-raised-button (click)=\\\"saveInfo()\\\" mat-button matStepperNext>Yes</button>\\n        </div>\\n      </form>\\n    </mat-card>\\n  </mat-step>\\n\\n  <mat-step>\\n    <ng-template matStepLabel>Done</ng-template>\\n    You are now done.\\n    <div>\\n      <button mat-raised-button matStepperPrevious>Back</button>\\n      <button mat-raised-button (click)=\\\"stepper.reset()\\\">Reset</button>\\n    </div>\\n  </mat-step>\\n</mat-horizontal-stepper>\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { QueryService } from '../services/query.service';\nimport { PostService } from '../services/post.service';\n\n@Component({\n  selector: 'app-test-form',\n  templateUrl: './test-form.component.html',\n  styleUrls: ['./test-form.component.css']\n})\nexport class TestFormComponent implements OnInit {\n  emailFormGroup: FormGroup;\n  verifyFormGroup: FormGroup;\n  fifthFormGroup: FormGroup;\n  userData;\n  workoutData;\n  emailSubmitted;\n  userEmail = '';\n  userID = '';\n  userNotFound = false;\n  workoutNotFound = false;\n  workoutQueryParams = {};\n  userQueryParams = {};\n\n  constructor(private queryService: QueryService, private postService: PostService, private _formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    this.emailFormGroup = this._formBuilder.group({\n      emailCtrl: ['', Validators.compose([Validators.email, Validators.required])]\n    });\n    this.verifyFormGroup = this._formBuilder.group({\n      verifyCtrl: ['', Validators.required]\n    });\n    this.fifthFormGroup = this._formBuilder.group({\n      fifthCtrl: ['', Validators.required]\n    });\n  }\n\n  getEmailError() {\n    return this.emailFormGroup.controls['emailCtrl'].hasError('required') ? 'You must enter a value' :\n      this.emailFormGroup.controls['emailCtrl'].hasError('email') ? 'Not a valid email' : '';\n  }\n\n  getInfo() {\n    if (this.emailFormGroup.controls['emailCtrl'].valid) {\n      this.getUserData();\n      //this.getWorkoutData();\n    }\n  }\n\n  saveInfo() {\n    try {\n      this.postService.addTest(this.workoutData);\n    }\n    catch (err) {\n      console.log('Error Saving Workout --->', err);\n    }\n    try {\n      this.postService.addConsole(this.workoutData);\n    }\n    catch (err) {\n      console.log('Error Saving Console --->', err);\n    }\n    try {\n      this.postService.addUser(this.userData.traits);\n    }\n    catch (err) {\n      console.log('Error Saving User --->', err);\n    }\n  }\n\n  async getWorkoutData() {\n    this.workoutQueryParams['event'] = \"Completed Workout\";\n    this.workoutQueryParams['userId'] = this.userID;\n    console.log('Query Params: ', this.workoutQueryParams);\n    await this.queryService.queryiFit(JSON.stringify(this.workoutQueryParams)).subscribe(res => {\n      this.workoutData = res[0].properties;\n      console.log(\"workoutData: \", this.workoutData);\n    this.workoutData['email'] = this.userEmail;\n    this.workoutData['membershipType'] = this.userData.traits['membershipType'];\n  });\n  }\n\n  async getUserData() {\n    this.userEmail = this.emailFormGroup.value['emailCtrl'];\n    this.emailSubmitted = `'${this.userEmail}'`;\n    this.userQueryParams[\"type\"] = \"identify\";\n    this.userQueryParams[\"traits.email\"] = this.userEmail;\n    await this.queryService.queryiFit(JSON.stringify(this.userQueryParams)).subscribe(res => {\n      this.userData = res[0];\n      console.log(\"userData: \", this.userData);\n      try {\n        this.userID = this.userData['userId'];\n      }\n      catch {\n        this.userNotFound = true;\n        console.log('User Cannot Be Found');\n      }\n      this.getWorkoutData();\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}