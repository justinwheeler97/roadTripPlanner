{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/services/error.service.ts","webpack:///./src/app/services/global-error-handler.ts","webpack:///./src/app/services/logging.service.ts","webpack:///./src/app/services/notification.service.ts","webpack:///./src/app/services/server-error.interceptor.ts","webpack:///./src/app/services/user.service.ts","webpack:///./src/app/tables/user-table/user-table.component.css","webpack:///./src/app/tables/user-table/user-table.component.html","webpack:///./src/app/tables/user-table/user-table.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".main {\\n  display: flex;\\n  flex-direction: column;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n\\nmat-sidenav-container {\\n    flex: 1;\\n}\\n\\nmat-sidenav {\\n    width: 150px;\\n    background-color: whitesmoke;\\n}\\n\\nmat-sidenav-content {\\n    background-color: white;\\n}\\n\"","module.exports = \"<div class=\\\"main\\\">\\n  <mat-sidenav-container class=\\\"sidenav-container\\\">\\n    <mat-sidenav #drawer mode=\\\"side\\\" opened role=\\\"navigation\\\" fixedInViewport>\\n      <mat-nav-list>\\n        <a mat-list-item routerLink='/users'>\\n          <mat-icon mat-list-icon>person</mat-icon>Users\\n        </a>\\n      </mat-nav-list>\\n    </mat-sidenav>\\n    <mat-sidenav-content>\\n      <router-outlet></router-outlet>\\n    </mat-sidenav-content>\\n  </mat-sidenav-container>\\n</div>\\n\"","import { Component, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport {MediaMatcher} from '@angular/cdk/layout';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n}\n","import { HttpModule } from '@angular/http';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Query, ErrorHandler } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { ModalModule } from 'ngx-modialog';\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { BootstrapModalModule } from 'ngx-modialog/plugins/bootstrap';\nimport { NguiAutoCompleteModule } from '@ngui/auto-complete';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatTableModule, MatCheckboxModule, MatSelectModule, MatSidenavModule, MatIconModule, MatToolbarModule, MatListModule, MatGridListModule, MatInputModule, MatSortModule, MatPaginatorModule } from '@angular/material';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { UserTableComponent } from './tables/user-table/user-table.component';\nimport { PanelModule } from 'primeng/primeng';\nimport { ButtonModule } from 'primeng/primeng';\nimport { RadioButtonModule } from 'primeng/primeng';\nimport { TableModule } from 'primeng/table';\nimport { AccordionModule } from 'primeng/accordion';\nimport { MenuModule } from 'primeng/menu';\nimport { CardModule } from 'primeng/card';\nimport { ContextMenuModule } from 'primeng/primeng';\nimport { DialogModule } from 'primeng/dialog';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ToastModule } from 'primeng/toast';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { InputTextareaModule } from 'primeng/inputtextarea';\nimport { InputMaskModule } from 'primeng/inputmask';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n\nimport { GlobalErrorHandler } from './services/global-error-handler';\nimport { ServerErrorInterceptor } from './services/server-error.interceptor';\n\n\n\n\n\n\nconst appRoutes: Routes = [\n  { path: '', redirectTo: '/users', pathMatch: 'full' },\n  { path: 'users', component: UserTableComponent, data: { title: 'Users' } }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UserTableComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n    RouterModule.forRoot(\n      appRoutes,\n      { useHash: true }\n    ),\n    ModalModule.forRoot(),\n    BootstrapModalModule,\n    NguiAutoCompleteModule, BrowserAnimationsModule,\n    MatTableModule, MatSelectModule, MatCheckboxModule, MatSidenavModule, MatIconModule, MatToolbarModule, MatListModule, MatCardModule, MatButtonModule,\n    CommonModule, MatGridListModule, MatInputModule, MatSortModule, MatPaginatorModule, MatProgressSpinnerModule, MatAutocompleteModule, ReactiveFormsModule, MatStepperModule,\n    AccordionModule,\n    PanelModule,\n    ButtonModule,\n    RadioButtonModule,\n    TableModule,\n    MenuModule,\n    CardModule,\n    ContextMenuModule,\n    DialogModule,\n    InputTextModule,\n    ToastModule,\n    DropdownModule,\n    InputTextareaModule,\n    InputMaskModule,\n    MatSnackBarModule\n  ],\n  providers: [\n    { provide: ErrorHandler, useClass: GlobalErrorHandler },\n    { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true }\n  ],\n  exports: [\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorService {\n\n  getClientMessage(error: Error): string {\n    if (!navigator.onLine) {\n      return 'No Internet Connection';\n    }\n    return error.message ? error.message : error.toString();\n  }\n\n  getClientStack(error: Error): string {\n    return error.stack;\n  }\n\n  getServerMessage(response: HttpErrorResponse): string {\n    return response.error;\n  }\n\n  getServerStack(error: HttpErrorResponse): string {\n    // handle stack trace\n    return 'stack';\n  }\n}\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { LoggingService } from './logging.service';\nimport { ErrorService } from './error.service';\nimport { NotificationService } from './notification.service';\n\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n\n  constructor(private injector: Injector) { }\n\n  handleError(error: Error | HttpErrorResponse) {\n    const errorService = this.injector.get(ErrorService);\n    const logger = this.injector.get(LoggingService);\n    const notifier = this.injector.get(NotificationService);\n\n    let message;\n    let stackTrace;\n\n    if (error instanceof HttpErrorResponse) {\n      // Server Error\n      message = errorService.getServerMessage(error);\n      stackTrace = errorService.getServerStack(error);\n      notifier.showError(message);\n    } else {\n      // Client Error\n      message = errorService.getClientMessage(error);\n      stackTrace = errorService.getClientStack(error);\n      notifier.showError(message);\n    }\n\n    logger.logError(message, stackTrace);\n\n    console.error(error);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggingService {\n\n  logError(message: string, stack: string) {\n    // Send errors to be saved here\n    // The console.log is only for testing this example.\n    console.log('LoggingService: ' + message);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(public snackBar: MatSnackBar, private zone: NgZone) { }\n\n  showSuccess(message: string): void {\n    this.zone.run(() => {\n      // The second parameter is the text in the button.\n      // In the third, we send in the css class for the snack bar.\n      this.snackBar.open(message, 'X', { panelClass: ['success'] });\n    });\n  }\n\n  showError(message: string): void {\n    this.zone.run(() => {\n      // The second parameter is the text in the button.\n      // In the third, we send in the css class for the snack bar.\n      this.snackBar.open(message, 'X', { panelClass: ['error'] });\n    });\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpEvent, HttpRequest, HttpHandler,\n  HttpInterceptor, HttpErrorResponse, HttpResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { NotificationService } from './notification.service';\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const notifier = this.injector.get(NotificationService);\n    return next.handle(request).pipe(\n      tap(evt => {\n        if (evt instanceof HttpResponse) {\n          if (evt.status == 201)\n            notifier.showSuccess(String(evt.body.message));\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          // refresh token\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  uri = '/api';\n  constructor(private http: HttpClient, ) { }\n\n  getUsers() {\n    return this.http.get(`${this.uri}/users/getUsers`)\n      .pipe(map(res => res));\n  }\n\n  getUserById(id: string) {\n    return this.http.get(`${this.uri}/users/getUserById/${id}`)\n      .pipe(map(res => res));\n  }\n\n  removeUserById(id: string) {\n    return this.http.get(`${this.uri}/users/removeUserById/${id}`)\n      .pipe(map(res => res));\n  }\n\n  addUser(user) {\n    let body = JSON.stringify(user);\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\n    return this.http.post('/api/users/addUser', body, httpOptions).subscribe();\n  }\n\n  updateUser(user) {\n    let body = JSON.stringify(user);\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\n    return this.http.post('/api/users/addUser', body, httpOptions).subscribe();\n  }\n\n}\n","module.exports = \".table-header {\\n  flex: 1 1 auto;\\n  text-align: center;\\n  font-size: 30px;\\n  color: white;\\n}\\n\\n.table {\\n    padding: 25px;\\n}\"","module.exports = \"<mat-toolbar role=\\\"heading\\\" color=\\\"warn\\\">\\n  <span class=\\\"table-header\\\">User Table</span>\\n</mat-toolbar>\\n<div class=\\\"table\\\">\\n  <p-table [value]=\\\"users\\\" #dt [columns]=\\\"cols\\\" [autoLayout]=true [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [loading]=\\\"loading\\\">\\n    <ng-template pTemplate=\\\"header\\\" let-columns>\\n      <tr>\\n        <th *ngFor=\\\"let col of columns\\\">\\n          {{col.header}}\\n        </th>\\n      </tr>\\n      <tr>\\n        <th *ngFor=\\\"let col of columns\\\" [ngSwitch]=\\\"col.field\\\">\\n          <input pInputText type=\\\"text\\\" (input)=\\\"dt.filter($event.target.value, col.field, col.filterMatchMode)\\\">\\n        </th>\\n      </tr>\\n    </ng-template>\\n    <ng-template pTemplate=\\\"body\\\" let-user let-columns=\\\"columns\\\">\\n      <tr>\\n        <td *ngFor=\\\"let col of columns\\\">\\n          {{user[col.field]}}\\n        </td>\\n      </tr>\\n    </ng-template>\\n    <ng-template pTemplate=\\\"summary\\\">\\n      There are {{users?.length}} users\\n    </ng-template>\\n  </p-table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../services/user.service';\n\n@Component({\n  selector: 'app-user-table',\n  templateUrl: './user-table.component.html',\n  styleUrls: ['./user-table.component.css']\n})\n\nexport class UserTableComponent implements OnInit {\n  users: any[];\n  cols: any[];\n  loading: boolean;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.loading = true;\n    this.userService.getUsers().subscribe((data: any[]) => {\n      this.users = data;\n      this.loading = false;\n    })\n    this.cols = [\n      { field: '_id', header: 'ID' },\n      { field: 'firstName', header: 'First Name' },\n      { field: 'lastName', header: 'Last Name' },\n      { field: 'email', header: 'Email' }\n    ];\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}